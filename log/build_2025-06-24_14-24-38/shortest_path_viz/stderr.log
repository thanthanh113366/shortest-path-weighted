In file included from [01m[K/usr/include/c++/11/cassert:44[m[K,
                 from [01m[K/home/hmt/shortest_path_weighted/src/shortest_path_viz/src/ShortestPathLib.cpp:7[m[K:
[01m[K/home/hmt/shortest_path_weighted/src/shortest_path_viz/src/ShortestPathLib.cpp:[m[K In member function â€˜[01m[Kconst VertexGeometricParams& Polyhedron::getVertexGeometricParams(int) const[m[Kâ€™:
[01m[K/home/hmt/shortest_path_weighted/src/shortest_path_viz/src/ShortestPathLib.cpp:472:38:[m[K [01;35m[Kwarning: [m[Kcomparison of integer expressions of different signedness: â€˜[01m[Kint[m[Kâ€™ and â€˜[01m[Kstd::vector<VertexGeometricParams>::size_type[m[Kâ€™ {aka â€˜[01m[Klong unsigned int[m[Kâ€™} [[01;35m[K]8;;https://gcc.gnu.org/onlinedocs/gcc/Warning-Options.html#index-Wsign-compare-Wsign-compare]8;;[m[K]
  472 |     assert(vertexID >= 0 && [01;35m[KvertexID < vertex_params_.size()[m[K && "Vertex ID out of bounds for geometric parameters.");
      |                             [01;35m[K~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~[m[K
[01m[K/home/hmt/shortest_path_weighted/src/shortest_path_viz/src/ShortestPathLib.cpp:[m[K In member function â€˜[01m[Kvoid Polyhedron::displaySteinerPoints() const[m[Kâ€™:
[01m[K/home/hmt/shortest_path_weighted/src/shortest_path_viz/src/ShortestPathLib.cpp:638:27:[m[K [01;35m[Kwarning: [m[Kcomparison of integer expressions of different signedness: â€˜[01m[Kstd::vector<const SteinerPoint*>::size_type[m[Kâ€™ {aka â€˜[01m[Klong unsigned int[m[Kâ€™} and â€˜[01m[Kint[m[Kâ€™ [[01;35m[K]8;;https://gcc.gnu.org/onlinedocs/gcc/Warning-Options.html#index-Wsign-compare-Wsign-compare]8;;[m[K]
  638 |         if ([01;35m[Kpoints.size() > show_count[m[K) {
      |             [01;35m[K~~~~~~~~~~~~~~^~~~~~~~~~~~[m[K
In file included from [01m[K/usr/include/c++/11/cassert:44[m[K,
                 from [01m[K/home/hmt/shortest_path_weighted/src/shortest_path_viz/src/ShortestPathLib.cpp:7[m[K:
[01m[K/home/hmt/shortest_path_weighted/src/shortest_path_viz/src/ShortestPathLib.cpp:[m[K In member function â€˜[01m[KShortestPathResult Polyhedron::findApproximateShortestPath(int, int, double)[m[Kâ€™:
[01m[K/home/hmt/shortest_path_weighted/src/shortest_path_viz/src/ShortestPathLib.cpp:817:48:[m[K [01;35m[Kwarning: [m[Kcomparison of integer expressions of different signedness: â€˜[01m[Kint[m[Kâ€™ and â€˜[01m[Kstd::vector<std::unique_ptr<HE_Vertex> >::size_type[m[Kâ€™ {aka â€˜[01m[Klong unsigned int[m[Kâ€™} [[01;35m[K]8;;https://gcc.gnu.org/onlinedocs/gcc/Warning-Options.html#index-Wsign-compare-Wsign-compare]8;;[m[K]
  817 |     assert(startVertexID >= 0 && [01;35m[KstartVertexID < vertices_.size()[m[K && "Start vertex ID is out of bounds.");
      |                                  [01;35m[K~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~[m[K
[01m[K/home/hmt/shortest_path_weighted/src/shortest_path_viz/src/ShortestPathLib.cpp:818:44:[m[K [01;35m[Kwarning: [m[Kcomparison of integer expressions of different signedness: â€˜[01m[Kint[m[Kâ€™ and â€˜[01m[Kstd::vector<std::unique_ptr<HE_Vertex> >::size_type[m[Kâ€™ {aka â€˜[01m[Klong unsigned int[m[Kâ€™} [[01;35m[K]8;;https://gcc.gnu.org/onlinedocs/gcc/Warning-Options.html#index-Wsign-compare-Wsign-compare]8;;[m[K]
  818 |     assert(endVertexID >= 0 && [01;35m[KendVertexID < vertices_.size()[m[K && "End vertex ID is out of bounds.");
      |                                [01;35m[K~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~[m[K
