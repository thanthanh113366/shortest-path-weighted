An e Approximation Algorithm for Weighted
Shortest Paths on Polyhedral Surfaces *

Lyudmil Aleksandrov¹, Mark Lanthier, Anil Maheshwari²,
Jörg-R. Sack2

1 Bulgarian Academy of Sciences, CICT,
Acad. G. Bonchev Str. Bl. 25-A, 1113 Sofia, Bulgaria
2 School of Computer Science, Carleton University,
Ottawa, Ontario K1S5B6, Canada

Abstract. Let P be a simple polyhedron, possibly non-convex, whose
boundary is composed of n triangular faces, and in which each face has
an associated positive weight. The cost of travel through each face is
the distance traveled multiplied by the face's weight. We present an e-
approximation algorithm for computing a weighted shortest path on P,
i.e. the ratio of the length of the computed path with respect to the length
of an optimal path is bounded by (1+ϵ) for a given ϵ>0 0.We give a
detailed analysis to determine the exact constants for the approximation
factor. The running time of the algorithm is O(mn log mn+nm 
2
 ). The
total number of Steiner points, m, added to obtain the approximation
depends on various parameters of the given polyhedron such as the length
of the longest edge, the minimum angle between any two adjacent edges
of P and the minimum distance from any vertex to the boundary of
the union of its incident faces and the ratio of the largest (finite) to the
smallest face weights of P. Lastly, we present an approximation algorithm.
with an improved running time of O(mn log mn). at the cost of trading off
the constants in the path accuracy. Our results present an improvement
in the dependency on the number of faces, n, to the recent results of
Mata and Mitchell [10] by a multiplicative factor of n 
2
 /log n, and to
that of Mitchell and Papadimitriou [11] by a factor of n 
7
 

1 Introduction

1.1 Problem Definition

Shortest path problems are among the fundamental problems studied in com-
putational geometry and other areas such as graph algorithms, geographical
information systems (GIS) and robotics. Let s and t be two vertices on a given
possibly non-convex polyhedron P, in R 
3
 , consisting of n triangular faces on its

*Research supported in part by ALMERCO Inc. & NSERC

5 We encountered several shortest path related problems in our R&D on GIS (see [15]);
more specifically, e.g., in emergency response time modeling where emergency units
are dispatched to emergency sites based on minimum travel times.

--- PAGE 2 ---

boundary, each face has an associated weight, denoted by a positive real number
w 
i
​
 . A Euclidean shortest path π(s,t) between s and t is defined to be a path with
minimum Euclidean length among all possible paths joining s and t that lie on
the surface of P. A weighted shortest path Π(s,t) between s and t is defined to
be a path with minimum cost among all possible paths joining s and t that lie
on the surface of P. The cost of the path is the sum of lengths of all segments,
the path traverses in each face multiplied by the corresponding face weight. A
path Π 
′
 (s,t) between two points s and t is said to be an e-approximation of a
(true) shortest path Π(s,t) between s and t, if  
Π(s,t)
Π 
′
 (s,t)
​
 ≤1+ϵ, for some ϵ>0.
The problem addressed in this paper is to determine an e-approximate shortest
path between two vertices on a weighted polyhedron.

1.2 Related Work

Shortest path problems in computational geometry can be categorized by var-
ious factors which include the dimensionality of space, the type and number
of objects or obstacles (e.g., polygonal obstacles, convex or non-convex poly-
hedra, ...), and the distance measure used (e.g., Euclidean, number of links, or
weighted distances). Several research articles, including surveys (see [5, 13]), have
been written presenting the state-of-the-art in this active field. Due to the lack
of space, here we discuss those contributions which relate more directly to our
work; these are in particular 3-dimensional weighted scenarios.

Mitchell and Papadimitriou [11] introduced the weighted region problem in
which each face has an associated positive weight, denoted by a real number
w 
i
​
 >0 They presented an algorithm that computes a path between two points
in a weighted planar subdivision which is at most (1+ϵ) times the shortest
weighted path cost. Their algorithm requires O(n 
8
 L) time in the worst case,
where L=log(nNW/wϵ) is a factor representing the bit complexity of the
problem instance. Here N is the largest integer coordinate of any vertex of the
triangulation and W (w) is the maximum (minimum) weight of any face of
the triangulation. Johannson discussed a weighted distance model for injection
molding [6]. Lanthier et al. [8] presented several practical algorithms for approx-
imating shortest paths in weighted domains. In addition, to their experimental
verification and time analysis, they provided theoretically derived bounds on the
quality of approximation. More specifically, the cost of the approximation is no
more than the shortest path cost plus an (additive) factor of W∣L∣, where L is
the longest edge, W is the largest weight among all faces. They also used graph
spanners to get at most  times the shortest path cost plus βW∣L∣, where β>1
is an adjustable constant. Mata and Mitchell [10] presented an algorithm that
constructs a graph (pathnet) which can be searched to obtain an approximate
path; their path accuracy is (1+ 
kwθ 
min
​
 
W
​
 ) where θ 
min
​
  is the minimum angle of
any face of P. W/w is the largest to smallest weight ratio and k is a constant
that depends upon e.

Table 1 compares the running times for the e-approximation algorithms de-
veloped by [11], [10], and the one presented in this paper in the case where all

--- PAGE 3 ---

vertices are given as integer coordinates. From the table we can clearly see that
our algorithm improves substantially the dependence on n, but the dependence
on the geometric parameters is somewhat worse. Since in many applications n
is quite large (larger than 10 
5
 ) the objective for this work has been to find an
e-approximation algorithm, where the dependence on n is considerably smaller.

"Algorithm
","Running Time (K=O( 
kw
N 
2
 W
​
 ))
"
"Mitchell and Papadimitriou [11]
","[O(n 
8
 log( 
N
nK
​
 ))
"
"Mata and Mitchell [10]
","O(n 
3
 K)
"
"Our Results
","O(n(K log K)log(nK log K))
"

Table 1. Comparison of weighted shortest path algorithms that rely on geometric
precision parameters. N represents the largest integer coordinate.

Although the objective of [8] was different, the schemes are e-approximations in
which the dependence on n becomes comparable to [10] (see [9]).

1.3 Our Approach

Our approach to solving the problem is to discretize the polyhedron in a natu-
ral way, by placing Steiner points along the edges of the polyhedron (as in our
earlier subdivision approach [8]). We construct a graph G containing the Steiner
points as vertices and edges as those interconnections between Steiner points
that correspond to segments which lie completely in the triangular faces of the
polyhedron. The geometric shortest path problem on polyhedra is thus stated as
a graph problem so that the existing efficient algorithms (and their implementa-
tions) for shortest paths in graphs can be used. One of the differences to [8] and
to other somewhat related work (e.g., [8,3,7]) lies in the placement of Steiner
points.

We introduce a logarithmic number of Steiner points along each edge of P,
and these points are placed in a geometric progression along an edge. They are
chosen w.r.t. the vertex joining two edges of a face such that the distance between
any two adjacent points on an edge is at most e times the shortest possible path
segment that can cross that face between those two points.

Our discretization method falls into the class of edge subdivision algorithms.
Grid-based methods as introduced e.g., by Papadimitriou [12], are instances of
this class. As concluded by Choi, Sellen and Yap [2]: "... grids are a familiar
practical technique in all of computational sciences. From a complexity theoretic
viewpoint, such methods have been shunned in the past as trivial or uninteresting.
This need not be so, as Papadimitriou's work has demonstrated. In fact, the grid
methods may be the most practical recourse for solving some intractable problems.
It would be interesting to derive some general theorems about these approaches"
Lanthier et al. [8] and Mata and Mitchell [10] are proofs of such practical methods
based on edge subdivision.

A problem arises when placing these Steiner points near vertices of the face
since the shortest possible segment becomes infinitesimal in length. A similar
issue was encountered by Kenyon and Kenyon [7] and Das and Narasimhan [3]

--- PAGE 4 ---

during their work on rectifiable curves on the plane and in 3-space, respectively.
The problem arises since the distance between adjacent Steiner points, in the
near vicinity of a vertex, would have to be infinitesimal requiring an infinite num-
ber of Steiner points. We address this problem by constructing spheres around
the vertices which have a very small radius (at most e times the shortest dis-
tance from the vertex to an edge that is not incident to the vertex). The graph
construction procedure never adds Steiner points within these spheres centered
around each vertex of the polyhedron. This allows us to put a lower bound on
the length of the smallest possible edge that passes between two adjacent Steiner
points and hence we are able to add a finite number of Steiner points. As a re-
sult, if the shortest path passes through one of these spheres, the approximate
path may pass through the vertex of the polyhedra, corresponding to the center
of the sphere.

We show that there exist paths in this graph with costs that are within
(1+ϵ) times the shortest path costs. For the purpose of simplifying the proofs,
we actually show that the approximation is within the bound of (1+ 
1−2ϵ
3−2ϵ
​
 ϵ)
times the shortest path length in the unweighted scenario and within the bound
of ( (1+(2+ 
(1−2ϵ)w
2W
​
 )ϵ) times the shortest cost in the weighted scenario where
0<ϵ< 
2
1
​
  and  
w
W
​
  is the largest to smallest weight ratio of the faces of P. The
desired e-approximation is achieved by dividinge by  
1−2ϵ
3−2ϵ
​
  or (2+ 
(1−2ϵ)w
2w
​
 ) for
the unweighted and weighted case, respectively. We can simplify the bounds of
our algorithm when ϵ<1/6. The bounds become (1+4ϵ) and (1+(2+3 
w
W
​
 )ϵ)
for the unweighted and weighted case, respectively. The running time of our
algorithm is the cost for computing the graph G plus that of running a shortest
path algorithm in G. The graph consists of ∣V∣=nm vertices and E]=nm 
2
 
edges where m=O(log 
δ
​
 (∣ 
L
 ∣/r)), L is the length of the longest edge, r is e
times the minimum distance from any vertex to the boundary of the union of its
incident faces (denoted as minimum height h of any face), and δ≥1+ϵ sin θ.
where  is the minimum angle between any two adjacent edges of P.

We also provide an algorithm to compute a subgraph G 
∗
  of G, on the same
vertex set as that of G, but with only O(nm log nm) edges. G 
∗
  has the property
that for any edge  
uv
 ∈G, there exists a path in G 
∗
  whose length is at most
(1+ϵ)∣∣ 
uv
 ∣∣. This results in an e-approximation algorithm for the shortest path
problem and it runs in O(nm log nm) time. (To study the entries in Table 1,
set h=Ω(1/N) and sin θ=Ω(1/N 
2
 ), where the vertices are assumed to have
integer coordinates bounded by N)..

Our analysis reveals the exact relationship between the geometric parame-
ters and the algorithm's running time. The dependence on geometric parameters
is an interesting feature of several approximation geometric algorithms. Many
researchers have advocated the use of geometric parameters in analyzing the
performance of geometric algorithms, and our result indicates that if the geo-
metric parameters are "well-behaved" then the asymptotic complexity of our
algorithms is several orders of magnitude better than existing ones. One of the
conclusions from our study is that while studying the performance of geomet-
ric algorithms, geometric parameters (e.g. fatness, density, aspect ratio, longest,

--- PAGE 5 ---

closest) should not be ignored, and in fact it could potentially be very useful to
express the performance that includes the relevant geometric parameters.

2 Preliminaries

Let s and t be two vertices of a triangulated polyhedral surface P with n faces.
A weight w 
i
​
 >0 is associated with each face f 
i
​
 ∈P such that the cost of travel
through f 
i
​
  is the distance traveled times
w 
i
​
  Define W and w to be the maximum
and minimum weight of all w 
i
​
 , 1≤i≤n,
respectively.

Property 1. An edge of P cannot have a weight greater than its adjacent faces.
Let L be the longest edge of P. Let π(s,t) be a shortest Euclidean length path
between s and t that remains on P with path length ∣π(s,t)∣. Let s 
1
​
 ,s 
2
​
 ,...,s 
k
​
 
be the segments of π(s,t) passing through faces f 
1
​
 ,f 
2
​
 ,...,f 
k
​
 . Similarly, define
Π(s,t) to be a shortest weighted cost path between s and t that remains on P
with weighted cost denoted as ∣∣Π(s,t)∣∣. Define G(V,E)=G 
1
​
 ∪G 
2
​
 ∪...G 
n
​
  to be
a graph such that G 
i
​
 ,1≤i≤n is a subgraph created on face f 
i
​
  with vertices
lying on edges of f 
i
​
  and edges of G 
i
​
  lying across face f 
i
​
 . Let E(G 
i
​
 ) represent the
edges of G 
i
​
  and V(G 
i
​
 ) represent the vertices of G 
i
​
 . Let π 
′
 (s,t)=s 
1
′
​
 ,s 
2
′
​
 ,...,s 
k
′
​
 
be a path in G passing through the same faces as π(s,t) with length ∣π 
′
 (s,t).
Similarly let Π 
′
 (s,t) be a path in G passing through the same faces as Π(s,t)
with weighted cost ∣∣Π 
′
 (s,t)∣∣.

Letv be a vertex of P. Define h 
v
​
  to be the minimum distance from v to the
boundary of the union of its incident faces. Define a polygonal cap C 
v
​
 , called a
sphere, around v, as follows. Letr r 
v
​
 =ϵh 
v
​
  for some 0<ϵ. Letr be the minimum
r 
v
​
  over all v. Let vuw be a triangulated face incident to v. Let u 
′
 (w 
′
 ) be at
the distance of r 
v
​
  from v on vu ( (vw). This defines a triangular sub-face vu 
′
 w 
′
  of
vuw. The sphere C 
v
​
  around v consists of all such sub-faces incident at v.

Property 2. The distance between any two spheres C 
v 
a
​
 
​
  and C 
v 
b
​
 
​
  is greater than
(1−2ϵ)h 
v 
a
​
 
​
 

Define θ 
v
​
  to be the minimum angle (measured in 3D) between any two edges
of P that are incident to v. Let  be the minimum θ 
v
​
  A weighted path may
critically use an edge of P by traveling along it and then reflecting back into
the face [11]. We distinguish between two types of path segments of a shortest
path: 1) face-crossing segments which cross a face and do not critically use an
edge, and 2) edge-using segments which lie along an edge (critically using it). In
the unweighted domain, edge-using segments span the entire length of an edge
in P and a face can only be crossed once by a shortest path [14]. However, in
the weighted domain, a face may be crossed more than once and so a weighted
shortest path may have θ(n 
2
 ) segments, see [11].

3 An

Approximation Scheme

This section presents the approximation scheme by first describing the com-
putation of the graph G, which discretize the problem. The construction of G

--- PAGE 6 ---

depends on the choice of e, so we assume that a positive ϵ< 
2
1
​
 
has been chosen
and is fixed. A shortest path in G between sandt will be the e-approximation
path π 
′
 (s,t) (or Π(s,t)) that we report.

Our proof strategy is as follows. We present a construction to show that there
exists a path, π 
′
 (s,t) (respectively, Π 
′
 (s,t)) between s and tin G 
1
​
  with cost
at most ( (1+ 
1−2ϵ
3−2ϵ
​
 ϵ) (respectively, (1+(2+ 
(1−2ϵ)w
2W
​
 )ϵ)) times the cost of π(s,t)
(respectively, Π(s,t)). Consider a shortest path Π(s,t) in P. It is composed of
several segments which go through faces, and/or along edges, and/or through
spheres around a vertex. For segments of Π(s,t) that are not completely con-
tained inside spheres, we show that there exists an appropriate edge in the graph.
For segments that are lying inside a sphere, we use a "charging" argument. (Due
to the lack of space, proofs are omitted; see [9] for details.)

3.1 An Algorithm to Compute the Graph

For each vertex v of face fi we do the following: Let e 
q
​
  and e 
p
​
  be the edges
of f 
i
​
  incident to v. First, place Steiner points on edges e 
q
​
  and e 
p
​
  at distance
r 
v
​
  from v; call them q 
1
​
  and p 
1
​
 , respectively. By definition, ∣ 
vq 
1
​
 
​
 ∣=∣ 
vp 
1
​
 
​
 ∣=r 
v
​
 
Define δ=(1+ϵ⋅sin θ 
v
​
 ) if θ 
v
​
 < 
2
π
​
 , otherwise δ=(1+ϵ) We now add Steiner
points q 
2
​
 ,q 
3
​
 ,...,q 
μ 
q
​
 −1
​
  along e 
q
​
  such that ∣ 
vq 
j
​
 
​
 ∣=r 
v
​
 δ 
j−1
  where μ 
q
​
 =log 
δ
​
 (∣e 
q
​
 ∣/r 
v
​
 )
Similarly, add Steiner points p 
2
​
 ,p 
3
​
 ,...,p 
μ 
p
​
 −1
​
  along e 
p
​
 , where μ 
p
​
 =log 
δ
​
 (∣e 
p
​
 ∣/r 
v
​
 ).
Define dist(a,e) as the minimum distance from a point a to an edge e. The
segment from a to e will be a perpendicular to e. This strategy creates sets of
Steiner points along edges e 
q
​
  and e 
p
​
  (see Figure la).

Claim 3.11 ∣ 
q 
i
​
 q 
i+1
​
 
​
 ∣=ϵ⋅⋅dist(q 
i
​
 ,e 
p
​
 ) and ∣ 
p 
j
​
 p 
j+1
​
 
​
 ∣=ϵ⋅⋅dist(p 
j
​
 ,e 
q
​
 ) where 0 <
i<μ 
q
​
  and 0<j<μ 
p
​
 .

e 
e,
​
 

ϵ 
μ 
2
​
 
​
 

H

000-00-0

(a)

cv 
x
​
 

r 
2
​
 

cv 
b
​
 

CV

(b)

Fig. 1. a) Placement of Steiner points on the edges of f 
i
​
  that are incident to vertex v.
b) Results of merging Steiner points along edges.

Since we have added Steiner points based on the minimum angle θ 
v
​
  about
v, we obtain "concentric parallel wavefronts" centered at v consisting of Steiner

--- PAGE 7 ---

point layers along the incident edges of v. Since this construction is made for each
vertex of a face f 
i
​
 , there will be two overlapping sets of Steiner points on each
edge of
f 
i
​
 . To eliminate this overlap, we reduce the number of Steiner points on
each edge. If two sets of Steiner points on an edge originate from the endpoints
of an edge e, we determine the point on e where the interval sizes from each set
are equal and eliminate all larger intervals. Intuitively, intervals are eliminated
from one set if there are small intervals in the other set that overlap with it (see
Figure 1b). The vertices of G 
i
​
  will be Steiner points as well as the vertices of P
defining fi. The edges of G 
i
​
  form a complete graph on its vertices. The graph G
is defined to be the union G 
1
​
 ∪G 
2
​
 ∪...G 
n
​
 

Claim 3.12. G is connected.

Claim 3.13. At most m≤2(1+log 
δ
​
 (∣L∣/r)) Steiner points are added to each
edge of fi, for 1≤i≤n.

Claim 3.14. G has O(n log 
δ
​
 (∣L∣/r)) vertices and O(n(log 
δ
​
 (∣L∣/r)) 
2
 )ϵ edges.
Theorem 1. Let 0<ϵ< 
2
1
​
 , Let P be a simple polyhedron with n faces and let s
and t be two of its vertices. An approximation π 
′
 (s,t) of a Euclidean shortest path
π(s,t) between s and t can be computed such that ∣π 
′
 (s,t)∣≤(1+ 
1−2ϵ
3−2ϵ
​
 ϵ)∣π(s,t)∣.
An approximation Π 
′
 (s,t) of a weighted shortest path Π(s,t) between s and t
can be computed such that ∣∣Π 
′
 (s,t)∣∣≤(1+(2+ 
(1−2ϵ)w
2W
​
 )ϵ)∣∣Π(s,t)∣∣. The ap-
proximations can be computed in O(mn log mn+nm 
2
 ) time where m=log 
δ
​
  
r
∣L∣
​
 ,
and δ=(1+ϵ sin θ).

Proof. For both cases, we show that there exists a path in G that satisfies the
claimed bounds using Lemma 2 and Lemma 4, respectively. Dijkstra's algorithm
will either compute this path or a path with equal or better cost, and therefore
the path computed by Dijkstra's algorithm as well satisfies the claimed approx-
imation bounds. The running time of the algorithm follows from the size of the
graph as stated in Claim 3.14. A variant of Dijkstra's algorithm using Fibonacci
heaps [4] is employed to compute the path in the stated time bounds.

Π

3.2 Proof of Correctness

Consider a subgraph G 
j
​
  1≤j≤n, as defined above. Let v be a vertex of a face
f 
j
​
  with edges e 
p
​
  and e 
q
​
  incident to v. We need the following technical lemma..
Lemma 1. Let s 
i
​
  be the smallest segment contained within f 
j
​
  such that one
endpoint of s 
i
​
  intersects e 
q
​
  between q 
i
​
  and q 
i+1
​
  and the other endpoint intersects
e 
p
​
  It holds that q 
i
​
 q 
i+1
​
 ∣≤ϵ∣s 
i
​
 ∣ . Furthermore, if θ 
v
​
 < 
2
π
​
  then s 
i
​
  is a perpendicular
bisector to e 
p
​
  and if θ 
v
​
 ≥ 
2
π
​
  then ∣s 
i
​
 ∣≥∣ 
vq 
i
​
 
​
 ∣

Let s 
i
​
  be a segment of π(s,t) (or Π(s,t)) crossing face f 
i
​
 . Each s 
i
​
 , must be of
one of the following types:

i) s 
i
​
 ∩C 
v
​
 =∅,i) s 
i
​
 ∩C 
v
​
 = subsegment of s 
i⋅
​
  or iii) s 
i
​
 ∩C 
v
​
 =s 
i
​
 .
Let C 
σ 
1
​
 
​
 ,C 
σ 
2
​
 
​
 ,...,C 
σ 
K
​
 
​
  be a sequence of spheres (listed in order from s to t) in-
tersected by type ii) segments of π(s,t) such that C 
σ 
j
​
 
​
 

=C 
σ 
j+1
​
 
​
  Now define
subpaths of π(s,t) (and Π(s,t)) as being one of two kinds:

--- PAGE 8 ---

Definition 1. Between-sphere subpath: A path consisting of a type ii) segment
followed by zero or more consecutive type i) segments followed by a type ii)
segment. These subpaths will be denoted as π(σ 
j
​
 ,σ 
j+1
​
 )(Π(σ 
j
​
 ,σ 
j+1
​
 ) for weighted
case) whose first and last segments intersect C 
σ 
j
​
 
​
  and C 
σ 
j+1
​
 
​
 , respectively. We will
also consider paths that begin or/and end at a vertex to be a degenerate case of
this type of path containing only type i) segments.

Definition 2. Inside-sphere subpath: A path consisting of one or more consec-
utive type iii) segments all lying within the same C 
σ 
j
​
 
​
  these are denoted as π(σ 
j
​
 )
(Π(σ 
j
​
 ) for weighted case).

Note that inside-sphere subpaths of π(s,t) (and Π(s,t)) always lie between two
between-sphere subpaths. That is, π(σ 
j
​
 ) lies between π(σ 
j−1
​
 ,σ 
j
​
 ) and π(σ 
j
​
 ,σ 
j+1
​
 ).
Claim 3.21. Let s 
i
​
  be a type i) segment with one endpoint between Steiner
points q 
j
​
  and q 
j+1
​
  on edge e 
q
​
  of a face f 
i
​
  and the other endpoint between Steiner
points p 
k
​
  and p 
k+1
​
  on edge e 
p
​
  of f 
i
​
 .

Then max(min(∣ 
q 
j
​
 p 
k
​
 
​
 ∣,∣ 
q 
j
​
 p 
k+1
​
 
​
 ∣) min(∣ 
q 
j+1
​
 P 
k
​
 
​
 ∣,∣ 
q 
j+1
​
 P 
k+1
​
 
​
 ∣))≤(1+ϵ)∣s 
i
​
 ∣.

Claim 3.22. Let s 
i
​
  be a type ii) segment crossing edge e 
q
​
  of fi between Steiner
points q 
j
​
  and q 
j+1
​
  and crossing e 
p
​
  between v and Steiner point p 
1
​
 , where j≥1
and v is the vertex common to e 
q
​
  and e 
p
​
  Then ∣ 
q 
1
​
 q 
j
​
 
​
 ∣ and ∣ 
q 
1
​
 q 
j+1
​
 
​
 ∣ are less than
(1+ϵ)∣s 
i
​
 ∣.

Bounding the Unweighted Approximation: We first describe the construc-
tion of an approximate path π 
′
 (s,t) in G, given a shortest path π(s,t) in P.
Consider a between-sphere subpath π(σ 
j
​
 ,σ 
j+1
​
 ) which consists of type i) and
type ii) segments only. First examine a type isegment s 
i
​
  of π(σ 
j
​
 ,σ 
j+1
​
 ) that
passes through edges e 
q
​
  and e 
p
​
  of face f 
i
​
  Assume s 
i
​
  intersects e 
q
​
  between Steiner
points q 
j
​
  and q 
j+1
​
  and also intersects e 
p
​
  between Steiner points p 
k
​
  and p 
k+1
​
 :
where k≥1. The approximated path is chosen such that it enters face f 
i
​
 
through Steiner point q 
j
​
  or q 
j+1
​
 . W.l.o.g. assume that the approximated path
enters f 
i
​
  at q 
j
​
 . Choose s 
i
′
​
  to be the shortest of q 
j
​
 p 
k
​
  and q 
j
​
 p 
k+1
​
  It is easily seen
that π 
′
 (σ 
j
​
 ,σ 
j+1
​
 ) is connected since adjacent segments s 
i−1
′
​
  and s 
i+1
′
​
  share an
endpoint (i.e., a Steiner point)...

Now examine a type ii) segment of π(σ 
j
​
 ,σ 
j+1
​
 ); this can appear as the first
or last segment. W.l.o.g. assume that it is the first segment. Let this segment
enter f 
i
​
  between Steiner points q 
j
​
  and q 
j+1
​
  and exit between vertex v 
σ 
j
​
 
​
  and
Steiner point p 
1
​
  on e 
p
​
 . Let s 
i
′
​
 = 
q 
1
​
 q 
j
​
 
​
  (if s 
i
​
  is the last segment, then we either
choose s 
i
′
​
  to be q 
1
​
 q 
j
​
  or q 
1
​
 q 
j+1
​
  depending on at which Steiner point the approx-
imated path up to f 
i
​
  enters f 
i
​
 ). It is easily seen that the combination of these
approximated segments forms a connected chain of edges in G which we will
call π 
′
 (σ 
j
​
 ,σ 
j+1
​
 ). One crucial property of π 
′
 (σ 
j
​
 ,σ 
j+1
​
 ) is that it begins at a point
where C 
σ 
j
​
 
​
  intersects an edge of P and ends at a point where C 
σ 
j+1
​
 
​
  intersects an
edge of P.

Consider two consecutive between-sphere subpaths of π(s,t), say π 
′
 (σ 
j−1
​
 ,σ 
j
​
 )
and π 
′
 (σ 
j
​
 ,σ 
j+1
​
 ). They are disjoint from one another, however, the first path ends

--- PAGE 9 ---

at sphere C 
σ 
j
​
 
​
  and the second path starts at C 
σ 
j
​
 
​
  Join the end of π 
′
 (σ 
j−1
​
 ,σ 
j
​
 ) and
the start of π 
′
 (σ 
j
​
 ,σ 
j+1
​
 ) to vertex ν 
σ 
j
​
 
​
  by two segments (which are edges of G).
These two segments together will be denoted as π 
′
 (σ 
j
​
 ) This step is repeated for
each consecutive pair of between-sphere subpaths so that all subpaths are joined
to form π 
′
 (s,t). (The example of Figure 2 shows how between-sphere subpaths
are connected to inside-sphere subpaths.) Constructing a path in this manner
results in a continuous path that lies on the surface of P.

π 
r
​
 σ 
1
​
 σ 
2
​
 

S

{\Pi_{2}^{\sigma}}_{2}\sigma_{3}}
C 
v 
2
​
 
​
 

π 
σ
  
2
​
 

π 
σ 
3
​
 
​
 

π 
σ 
3
​
 σ 
4
​
 
′
​
  
4
​
 

Fig. 2. An example showing the between-sphere and inside-sphere subpaths that con-
nect to form the approximated path π(s,t)

Claim 3.23. Let π 
′
 (σ 
j−1
​
 ,σ 
j
​
 ) be a between-sphere subpath of π 
′
 (s,t) correspond-
ing to an approximation of π(σ 
j−1
​
 ,σ 
j
​
 ) where 1<j≤κ. Then ∣π 
′
 (σ 
j
​
 )∣≤
1−2ϵ
2ϵ
​
 ∣π(σ 
j−1
​
 ,σ 
j
​
 )∣, where 0<ϵ< 
2
1
​
 

Proof. From Property 2, the distance between C 
σ 
z
 −1
​
 
​
  and C 
σ 
j
​
 
​
  must be at least
( (1−2ϵ)h 
v 
σ
​
 z
​
  Since π(σ 
j−1
​
 ,σ 
j
​
 ) is a between-sphere subpath, it intersects both
C 
σ 
j−1
​
 
​
  and C 
σ 
j
​
 
​
  Thus ∣π(σ 
j−1
​
 ,σ 
j
​
 )∣≥(1−2ϵ)h 
v 
σ 
j
​
 
​
 
​
  By definition, π 
′
 (σ 
j
​
 ) con-
sists of exactly two segments which together have length satisfying ∣π 
′
 (σ 
j
​
 )∣=
2r 
v 
σ 
j
​
 
​
 
​
 =2ϵh 
v 
σ 
j
​
 
​
 
​
 . Thus, ∣π(σ 
j−1
​
 ,σ 
j
​
 )∣≥( 
2ϵ
1−2ϵ
​
 )∣π 
′
 (σ 
j
​
 )∣ which can be re-written as
∣π 
′
 (σ 
j
​
 )∣≤ 
1−2ϵ
2ϵ
​
 ∣π(σ 
j−1
​
 ,σ 
j
​
 )∣.

Π

Lemma 2. If π(s,t) is a shortest path in P, where s and t are vertices of
P then there exists an approximated path π 
′
 (s,t)∈G for which ∣π 
′
 (s,t)∣≤
(1+ 
1−2ϵ
3−2ϵ
​
 ϵ)∣π(s,t)∣ , where 0<ϵ< 
2
1
​
 

Proof. Using the results of Claim 3.22 and Claim 3.23, we can "charge" the cost
of each inside-sphere subpath π 
′
 (σ 
j
​
 ) to the between-sphere subpath π 
′
 (σ 
j−1
​
 ,σ 
j
​
 )
as follows: ∣π 
′
 (σ 
j−1
​
 ,σ 
j
​
 )∣+∣π 
′
 (σ 
j
​
 )∣≤(1+ϵ)∣π(σ 
j−1
​
 ,σ 
j
​
 )∣+( 
1−2ϵ
2ϵ
​
 )∣π(σ 
j−1
​
 ,σ 
j
​
 )∣=
(1+ 
1−2ϵ
3−2ϵ
​
 ϵ)∣π(σ 
j−1
​
 ,σ 
j
​
 )∣. The union of all subpaths π 
′
 (σ 
j−1
​
 ,σ 
j
​
 ) and π 
′
 (σ 
j
​
 ) form
π 
′
 (s,t) where 2≤j≤κ Hence, we have bounded ∣π 
′
 (s,t)∣ w.r.t. the between-
sphere subpaths of π(s,t) Therefore
∣π 
′
 (s,t)∣≤(1+ 
1−2ϵ
3−2ϵ
​
 ϵ)∑ 
j=2
κ
​
 ∣π(σ 
j−1
​
 ,σ 
j
​
 )∣≤(1+ 
1−2ϵ
3−2ϵ
​
 ϵ)∣π(s,t)∣.

Π

--- PAGE 10 ---

Bounding the Weighted Approximation: Given a shortest path Π(s,t).
we construct a path Π 
′
 (s,t) in a similar manner as in the unweighted scenario.
However, we must consider the approximation of edge-using segments since they
may no longer span the full length of the edge which they are using. Consider
an edge-using segment s 
i
​
  of Π(s,t) on edge e 
p
​
  of P with endpoints lying in
Steiner point intervals [p 
y
​
 ,p 
y+1
​
 ] and [p 
u−1
​
 ,p 
u
​
 ] along e 
p
​
 , where y<u. Let
s 
i−1
​
 
and s 
i+1
​
 , respectively, be the two crossing segments representing the predecessor
and successor of s 
i
​
  in the sequence of segments in π(s,t) We will assume that
two such edges exist although it is possible that s 
i−1
​
  and s 
i
​
  meet at a vertex of
P; which can easily be handled as well. We choose an approximation s 
3
′
​
  of s 
i
​
  to
be one of p 
y
​
 p 
u−1
​
  or p 
y+1
​
 p 
u−1
​
  depending on whether s 
i−1
′
​
  intersects e 
p
​
  at p 
y
​
  or
p 
y+1
​
  respectively. Note that we make sure to choose s 
i
′
​
  so that it is connected
to s 
i−1
′
​
 . Of course, s 
i+1
′
​
  will also be chosen to ensure connectivity with s 
i
′
​
  In the
degenerate case where u=y+1, then there is no approximation for s 
ij
​
 . Instead,
s 
i−1
′
​
 
is connected directly to s 
i+1
′
​
 . In fact, Dijkstra's algorithm will never choose
such a subpath since it does not make use of e 
p
​
 . However, the path it does choose
will be better than this, so our bound will hold for this better path as well.

Claim 3.24. Let s 
i
​
  be an edge-using segment of Π(σ 
j
​
 ,σ 
j+1
​
 ) and let s 
i−1
​
  be the
segment of Π(σ 
j
​
 ,σ 
j+1
​
 ) preceding S 
i
​
 . There exists a segment s 
i
′
​
  of Π 
′
 (σ 
j
​
 ,σ 
j+1
​
 )
for which ∣∣s 
i
′
​
 ∣∣≤∣∣s 
i
​
 ∣∣+ϵ∣∣s 
i−1
​
 ∣∣

Lemma 3. If Π 
′
 (σ 
j−1
​
 ,σ 
j
​
 ) is a between-sphere subpath of Π 
′
 (s,t) corresponding
to an approximation of Π(σ 
j−1
​
 ,σ 
j
​
 ) then ∣∣Π 
′
 (σ 
j−1
​
 ,σ 
j
​
 )∣∣≤(1+2ϵ)∣∣Π(σ 
j−1
​
 ,σ 
j
​
 )∣∣
Claim 3.25. Let Π 
′
 (σ 
j−1
​
 ,σ 
j
​
 ) be a between-sphere subpath of Π 
′
 (s,t) corre-
sponding to an approximation of Π(σ 
j−1
​
 ,σ 
j
​
 ) then
∣∣Π 
′
 (σ 
j
​
 )∣∣≤ 
(1−2ϵ)w
2ϵ 
W
˙
 
​
 ∣∣Π(σ 
j−1
​
 ,σ 
j
​
 )∣∣ where 0<ϵ< 
2
1
​
 

We have made the assumption that Π 
′
 (σ 
j
​
 ) consists of segments passing
through faces that have weight W. Although this may be true in the worst
case, we could use the maximum weight of any face adjacent to v 
σ 
j
​
 
​
 , which typi-
cally would be smaller than W. In addition, we have assumed that Π 
′
 (σ 
j−1
​
 ,σ 
j
​
 )
traveled through faces with minimum weight. We could determine the smallest
weight of any face through which Π 
′
 (σ 
j−1
​
 ,σ 
j
​
 ) passes and use that in place of
w. This would lead to a better bound.

Lemma 4. If Π(s,t) is a shortest weighted path in P, where s and t are vertices
of P then there exists an approximated path Π 
′
 (s,t)∈G such that ∣∣Π 
′
 (s,t)∣∣≤
(1+(2+ 
(1−2ϵ)w
2W
​
 )ϵ)∣∣Π(s,t)∣∣ where 0<ϵ< 
2
1
​
 

Proof. Using the results of Claim 3.25 and Lemma 3, it can be shown that
∣∣Π 
′
 (σ 
j−1
​
 ,σ 
j
​
 )∣∣+∣∣Π 
′
 (σ 
j
​
 )∣∣≤(1+(2+ 
(1−2ϵ)w
2W
​
 )ϵ)∣∣Π(σ 
j−1
​
 ,σ 
j
​
 )∣∣

This essentially "charges" the length of an inside-sphere subpath to a between-
sphere subpath. The union of all such subpaths form Π 
′
 (s,t) This allows us to
approximate Π 
′
 (s,t) within the bound of 1+(2+ 
(1−2ϵ)w
2W
​
 )ϵ times the total cost
of all the between-sphere subpaths of Π(s,t). Since Π(s,t) has cost at least that
of its between-sphere subpaths, ∣∣Π 
′
 (s,t)∣∣≤(1+(2+ 
(1−2ϵ)w
2W
​
 )ϵ)∣∣Π(s,t)∣∣ . Π

--- PAGE 11 ---

4 Reduced Approximation Graph

We show that some of the edges of the approximation graph G can be removed,
so that for the obtained graph G 
∗
 , our results hold with a slightly worse constant.
Since the reduced graph has only O(nm log mn) edges the running time of the
resulting algorithm will improve substantially.

The graph G 
∗
 =(V(G),E(G 
∗
 )) is a subgraph of G having the same vertex set
and E(G 
∗
 )⊂E(G) We describe the construction of G 
∗
  by describing the choice
of edges for E(G 
∗
 ). All edges in E(G) that are subsegments of the edges of P
remain in E(G 
∗
 ) The vertices of P in G 
∗
  are adjacent only to their neighboring
Steiner points. Now we consider a fixed Steiner point p and describe the edges

of
G 
∗
  incident to p. Assume that plies on an edge e of P. By our construction
of G the point p is connected to all Steiner points that lie on one of the four (or
less) edges of P sharing a face (triangle) with e. We describe the construction
on one of these edges, say e 
1
​
 , and let q 
1
​
 ,...q 
k
​
  be the Steiner points on e 
1
​
 . Let
M be the point closest to p on interval (q 
1
​
 ,q 
k
​
 ). The edges pq 
1
​
  and pq 
k
​
  are in
E(G 
∗
 ) We choose the edges joining p with points in the subintervals (q 
1
​
 ,M) and
(M,q 
k
​
 ) as follows: Consider the interval (M,q 
k
​
 ) and define a sequence of points
x 
0
​
 ,x 
1
​
 ,...,x 
κ
​
  in this interval, so that  
x 
i−1
​
 x 
i
​
 
​
 ∣=ϵ∣ 
px 
i−1
​
 
​
 ∣ Observe that there
is at least one Steiner point in each of the intervals (x 
i−1
​
 ,x 
i
​
 ), for i=1,...,κ.
Now, fori i=1,...κ. we denote by q 
i
  the Steiner point closest to x 
i−1
​
  in the
interval (x 
i−1
​
 ,x 
i
​
 ) and define pq 
i
  to be edges of G 
∗
  By the same procedure we
define the subset of the Steiner points in (M,q 
1
​
 ) and connect p to the points in
this subset. Omitting the technical proof, we claim that the out-degree of any
Steiner point is O(log m); hence G 
∗
  has O(nm log mn) edges and any edge e in
G can be approximated by a path e 
∗
  in G 
∗
  so that ∣∣e 
∗
 ∣∣ is an e- approximation
of || ∣∣e∣∣ The result is summarized in the following theorem:

Theorem 2. An e-approximate weighted shortest path between two vertices on
a polytope consisting of n triangular faces can be computed in O(nm log mn)
time, where m is a constant that depends upon e and the geometric parameters
as discussed before.

5 Conclusions and Ongoing Work

We have presented algorithms to compute e-approximate paths on weighted poly-
hedra. More specifically, the algorithms compute paths from the source vertex s
to all vertices, Steiner points which are introduced on edges of the polyhedron.
The techniques described in this paper can be used to derive algorithms for
shortest path queries, as discussed in [1]. An alternative approach, which we are
investigating, is to compute the relevant portion of the subgraphs G 
i
​
  on the fly.
It is clear that in Dijkstra's algorithm when the current vertex v (with least cost)
explores the edges incident to it, we don't have to explore all of them because
of the following: suppose the approximate path to  is through an edge  
uv
  then
from v we need to explore those edges which obey Snell's law with respect to  
uv
 .
We suspect that the total number of edges that needs to be explored with this

--- PAGE 12 ---

modification will be substantially lower. Moreover, we do not have to sacrifice
the accuracy of the path obtained.

References

L. Aleksandrov, M. Lanthier, A. Maheshwari and J.-R. Sack, "An e-Approximation
Algorithm for Weighted Shortest Path Queries on Polyhedral Surfaces", to appear
14th European Workshop on Computational Geometry, Barcelona, Spain, 1998.

J. Choi, J. Sellen and C.K. Yap, "Approximate Euclidean Shortest Path in 3-
Space", Proc. 10th Annual Symp. on Computational Geometry, 1994, pp. 41-48.

G. Das and G. Narasimhan, "Short Cuts in Higher Dimensional Space", Proceed-
ings of the 7th Annual Canadian Conference on Computational Geometry, Québec
City, Québec, 1995, pp. 103-108.

M.L. Fredman and R.E. Tarjan, "Fibonacci Heaps and Their Uses in Improved
Network Optimization Algorithms", J. ACM, 34(3), 1987, pp.596-615.

J. Goodman and J. O'Rourke, Eds., Handbook of Discrete and Computational Ge-
ometry, CRC Press LLC, Chapter 24, 1997, pp. 445-466.

P. Johansson, "On a Weighted Distance Model for Injection Molding", Linköping
Studies in Science and Technology, Thesis no. 604 LIU-TEK-LIC-1997:05, Division
of Applied Mathematics, Linköping University, Linköping, Sweden, 1997.

C. Kenyon and R. Kenyon, "How To Take Short Cuts", Discrete and Computational
Geometry, Vol. 8, No. 3, 1992, pp. 251-264.

M. Lanthier, A. Maheshwari and J.-R. Sack, "Approximating Weighted Shortest
Paths on Polyhedral Surfaces", Proceedings of the 13th Annual ACM Symposium
on Computational Geometry, 1997, pp. 274-283.

M. Lanthier, "Shortest Path Problems on Polyhedral Surfaces", Ph.D. Thesis in
progress, School of Computer Science, Carleton University, Ottawa, Canada, 1998.

C. Mata and J. Mitchell, "A New Algorithm for Computing Shortest Paths in
Weighted Planar Subdivisions", Proceedings of the 13th Annual ACM Symposium
on Computational Geometry, 1997, pp. 264-273.

J.S.B. Mitchell and C.H. Papadimitriou, "The Weighted Region Problem: Finding
Shortest Paths Through a Weighted Planar Subdivision", Journal of the ACM, 38,
January 1991, pp. 18-73.

C.H. Papadimitriou, "An Algorithm for Shortest Path Motion in Three Dimen-
sions", Information Processing Letters, 20, 1985, pp. 259-263.

J.-R. Sack and J. Urrutia Eds., Handbook on Computational Geometry, Elsevier
Science B.V., to appear.

M. Sharir and A. Schorr, "On Shortest Paths in Polyhedral Spaces", SIAM Journal
of Computing, 15, 1986, pp. 193-215.

Paradigm Group Webpage, School of Computer Science, Carleton University,
http://www.scs.carleton.ca/gis.